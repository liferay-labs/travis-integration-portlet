<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%@ include file="/html/init.jsp" %>

<%
JSONArray testResults = (JSONArray)request.getAttribute("TEST_RESULTS");

boolean displaySkipCount = GetterUtil.getBoolean(portletPreferences.getValue("skipcount", null));
boolean displayFailCount = GetterUtil.getBoolean(portletPreferences.getValue("failcount", null));
boolean displayTotalCount = GetterUtil.getBoolean(portletPreferences.getValue("totalcount", null));
boolean displayPassCount = GetterUtil.getBoolean(portletPreferences.getValue("passcount", null));

String passedCountColor = GetterUtil.getString(portletPreferences.getValue("passedcountcolor", null));
String skippedCountColor = GetterUtil.getString(portletPreferences.getValue("skippedcountcolor", null));
String failedCountColor = GetterUtil.getString(portletPreferences.getValue("failedcountcolor", null));
String totalCountColor = GetterUtil.getString(portletPreferences.getValue("totalcountcolor", null));

String charType = GetterUtil.getString(portletPreferences.getValue("charttype", null));

boolean displayStacked = GetterUtil.getBoolean(portletPreferences.getValue("stacked", null));

String i18nBuild = LanguageUtil.get(pageContext, "build");
String i18nPassed = LanguageUtil.get(pageContext, "passed");
String i18nSkipped = LanguageUtil.get(pageContext, "skipped");
String i18nFailed = LanguageUtil.get(pageContext, "failed");
String i18nTotal = LanguageUtil.get(pageContext, "total");

String seriesKeys = "";

if (displayPassCount) {
	seriesKeys += "'" + i18nPassed + "',";
}

if (displaySkipCount) {
	seriesKeys += "'" + i18nSkipped + "',";
}

if (displayTotalCount) {
	seriesKeys += "'" + i18nTotal + "',";
}

if (displayFailCount) {
	seriesKeys += "'" + i18nFailed + "',";
}

if (Validator.isNotNull(seriesKeys)) {
	seriesKeys = seriesKeys.substring(0, seriesKeys.length() - 1);
}
%>
	<c:if test="<%= Validator.isNotNull(testResults) %>">
		<style>
			#<portlet:namespace/>chartbox {
				width: 100%;
				height: 400px;
			}
		</style>

		<div id="<portlet:namespace/>chartbox"></div>

		<aui:script use="charts-legend">
			var <portlet:namespace/>myDataValues = [
				<%
				for (int i = testResults.length() -1; i >= 0; i--) {
					JSONObject testResult = (JSONObject)testResults.get(i);

					JSONArray category = (JSONArray)testResult.get("buildNumber");

					int skipCount = testResult.getInt("skipCount");
					int failCount = testResult.getInt("failCount");

					int passCount = 0;
					int totalCount = 0;

					if (!testResult.has("passCount") && testResult.has("totalCount")) {
						totalCount = testResult.getInt("totalCount");
						passCount = totalCount - failCount - skipCount;
					}
					else {
						passCount = testResult.getInt("passCount");
						totalCount = passCount + skipCount + failCount;
					}

					String line = "{" + i18nBuild + ":'" + category.getInt(0) + "'";

					if (displayPassCount) {
						line += ", " + i18nPassed + ":" + passCount;
					}

					if (displaySkipCount) {
						line += ", " + i18nSkipped + ":" + skipCount;
					}

					if (displayTotalCount) {
						line +=  ", " + i18nTotal + ":" + totalCount;
					}

					if (displayFailCount) {
						line += ", " + i18nFailed + ": " + failCount;
					}

					line += "}";

					if (i > 0) {
						line += ",";
					}

					out.println(line);
				}
				%>
			];

			var stylesDef = {
				series:{
				<% if (displayPassCount) {%>
					<%= i18nPassed %>: {
						<%= JSONUtil.buildMarker(passedCountColor) %>
						line:{
							color:"<%= passedCountColor %>"
						}
					},
				<%} %>
				<% if (displaySkipCount) {%>
					<%= i18nSkipped %>: {
						<%= JSONUtil.buildMarker(skippedCountColor) %>
						line:{
							color:"<%= skippedCountColor %>"
						}
					},
				<%} %>
				<% if (displayFailCount) {%>
					<%= i18nFailed %>: {
						<%= JSONUtil.buildMarker(failedCountColor) %>
						line:{
							color:"<%= failedCountColor %>"
						}
					},
				<%} %>
				<% if (displayTotalCount) {%>
					<%= i18nTotal %>: {
						<%= JSONUtil.buildMarker(totalCountColor) %>
						line:{
							color:"<%= totalCountColor %>"
						}
					}
				<%} %>
				}
			}

			var <portlet:namespace/>chartbox = new A.Chart({
				categoryKey: "<%= i18nBuild %>",
				dataProvider: <portlet:namespace/>myDataValues,
				legend: {
					position: "right",
					width: 300,
					height: 300,
					styles: {
						hAlign: "center",
						hSpacing: 4
					}
				},
				seriesKeys:[<%= seriesKeys %>],
				styles: stylesDef,
			<%
			if (displayStacked) {
			%>
				stacked: "<%= Boolean.TRUE %>",
			<%
			}
			if (!charType.equals("default")) {
			%>
				type: "<%= charType %>",
			<%
			}
			%>
				render: "#<portlet:namespace/>chartbox"
			});
		</aui:script>
	</c:if>